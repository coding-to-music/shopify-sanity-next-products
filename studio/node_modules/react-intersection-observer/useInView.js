"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useInView = void 0;
const React = __importStar(require("react"));
const react_1 = require("react");
const observe_1 = require("./observe");
/**
 * React Hooks make it easy to monitor the `inView` state of your components. Call
 * the `useInView` hook with the (optional) [options](#options) you need. It will
 * return an array containing a `ref`, the `inView` status and the current
 * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).
 * Assign the `ref` to the DOM element you want to monitor, and the hook will
 * report the status.
 *
 * @example
 * ```jsx
 * import React from 'react';
 * import { useInView } from 'react-intersection-observer';
 *
 * const Component = () => {
 *   const { ref, inView, entry } = useInView({
 *       threshold: 0,
 *   });
 *
 *   return (
 *     <div ref={ref}>
 *       <h2>{`Header inside viewport ${inView}.`}</h2>
 *     </div>
 *   );
 * };
 * ```
 */
function useInView({ threshold, delay, trackVisibility, rootMargin, root, triggerOnce, skip, initialInView, } = {}) {
    const unobserve = React.useRef();
    const [state, setState] = React.useState({
        inView: !!initialInView,
    });
    const setRef = React.useCallback((node) => {
        if (unobserve.current !== undefined) {
            unobserve.current();
            unobserve.current = undefined;
        }
        // Skip creating the observer
        if (skip)
            return;
        if (node) {
            unobserve.current = (0, observe_1.observe)(node, (inView, entry) => {
                setState({ inView, entry });
                if (entry.isIntersecting && triggerOnce && unobserve.current) {
                    // If it should only trigger once, unobserve the element after it's inView
                    unobserve.current();
                    unobserve.current = undefined;
                }
            }, {
                root,
                rootMargin,
                threshold,
                // @ts-ignore
                trackVisibility,
                // @ts-ignore
                delay,
            });
        }
    }, 
    // We break the rule here, because we aren't including the actual `threshold` variable
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
        // If the threshold is an array, convert it to a string so it won't change between renders.
        // eslint-disable-next-line react-hooks/exhaustive-deps
        Array.isArray(threshold) ? threshold.toString() : threshold,
        root,
        rootMargin,
        triggerOnce,
        skip,
        trackVisibility,
        delay,
    ]);
    /* eslint-disable-next-line */
    (0, react_1.useEffect)(() => {
        if (!unobserve.current && state.entry && !triggerOnce && !skip) {
            // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)
            // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView
            setState({
                inView: !!initialInView,
            });
        }
    });
    const result = [setRef, state.inView, state.entry];
    // Support object destructuring, by adding the specific values.
    result.ref = result[0];
    result.inView = result[1];
    result.entry = result[2];
    return result;
}
exports.useInView = useInView;
